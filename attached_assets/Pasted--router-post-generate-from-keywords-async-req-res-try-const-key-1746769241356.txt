// ...既存コード...

router.post('/generate-from-keywords', async (req, res) => {
  try {
    const { keywords } = req.body;

    if (!keywords || typeof keywords !== 'string' || !keywords.trim()) {
      return res.status(400).json({
        success: false,
        error: 'キーワードが指定されていません'
      });
    }

    console.log(`キーワード "${keywords}" からフローを生成します`);

    // ナレッジベースから関連情報を検索
    console.log('ナレッジベースから関連情報を検索中...');
    const relevantChunks = await searchKnowledgeBase(keywords);
    console.log(`関連チャンク数: ${relevantChunks.length}`);

    let relatedKnowledgeText = '';
    if (relevantChunks.length > 0) {
      relatedKnowledgeText = '\n\n【関連する知識ベース情報】:\n';
      const chunksToInclude = relevantChunks.slice(0, 5);

      for (const chunk of chunksToInclude) {
        relatedKnowledgeText += `---\n出典: ${chunk.metadata.source || '不明'}\n\n${chunk.text}\n---\n\n`;
      }
    }

    const prompt = `以下のキーワードに関連する応急処置フローを生成してください。
必ず完全なJSONオブジェクトのみを返してください。追加の説明やテキストは一切含めないでください。
レスポンスは純粋なJSONデータだけであるべきで、コードブロックのマークダウン記法は使用しないでください。
JSONの形式は次のようにしてください：

{
  "id": "一意の識別子",
  "title": "フローのタイトル",
  "description": "フローの説明",
  "triggerKeywords": ["キーワード1", "キーワード2"],
  "steps": [
    {
      "id": "step1",
      "title": "開始ステップ",
      "description": "開始ステップの説明",
      "imageUrl": "",
      "type": "start",
      "options": [
        {
          "text": "次へ進む",
          "nextStepId": "step2",
          "isTerminal": false,
          "conditionType": "other"
        }
      ]
    },
    {
      "id": "step2",
      "title": "判断ステップ",
      "description": "条件に基づく判断を行います",
      "imageUrl": "",
      "type": "decision",
      "options": [
        {
          "text": "はい",
          "nextStepId": "step3",
          "isTerminal": false,
          "conditionType": "yes"
        },
        {
          "text": "いいえ",
          "nextStepId": "step4",
          "isTerminal": false,
          "conditionType": "no"
        }
      ]
    },
    {
      "id": "step3",
      "title": "処置ステップ",
      "description": "条件が満たされた場合の処置",
      "imageUrl": "",
      "type": "step",
      "options": []
    },
    {
      "id": "step4",
      "title": "終了ステップ",
      "description": "条件が満たされなかった場合の終了",
      "imageUrl": "",
      "type": "end",
      "options": []
    }
  ]
}

【キーワード】: ${keywords}
${relatedKnowledgeText}`;

    console.log('OpenAIにフロー生成をリクエスト中...');
    const generatedFlow = await processOpenAIRequest(prompt);

    let flowData;
    try {
      console.log(`fixAndParseJSONを使用してJSONを解析...`);
      flowData = fixAndParseJSON(generatedFlow);

      if (!flowData.id) {
        const generatedId = keywords.toLowerCase()
          .replace(/[^a-z0-9_]/g, '_')
          .replace(/_+/g, '_')
          .substring(0, 50);
        flowData.id = `flow_${generatedId}_${Date.now()}`;
      }

      const flowFilePath = path.join(troubleshootingDir, `${flowData.id}.json`);
      let finalId = flowData.id;
      let counter = 1;

      while (fs.existsSync(path.join(troubleshootingDir, `${finalId}.json`))) {
        finalId = `${flowData.id}_${counter}`;
        counter++;
      }

      flowData.id = finalId;

      fs.writeFileSync(
        path.join(troubleshootingDir, `${flowData.id}.json`),
        JSON.stringify(flowData, null, 2)
      );

      flowData.createdAt = new Date().toISOString();

      res.json({
        success: true,
        message: `フローが正常に生成されました: ${flowData.title}`,
        flowData
      });

    } catch (parseError) {
      console.error('生成されたフローの解析エラー:', parseError);
      console.error('生成されたテキスト:', generatedFlow);

      res.status(500).json({
        success: false,
        error: 'フローデータの解析に失敗しました',
        rawResponse: generatedFlow
      });
    }
  } catch (error) {
    console.error('フロー生成エラー:', error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : '不明なエラーが発生しました'
    });
  }
});

// ...既存コード...